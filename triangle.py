from manim import *
class triangle(Scene):
    def construct(self):
        t = Triangle()
        t.set_fill(color = BLUE, opacity = 0.5)
        self.play(DrawBorderThenFill(t))
        x = Dot(t.point_from_proportion(0))
        y = Dot(t.point_from_proportion(1/3))
        z = Dot(t.point_from_proportion(2/3))
        x_t = Text("x").next_to(x.get_center(), UP)
        y_t = always_redraw(lambda: Text("y").next_to(y.get_center(), LEFT))
        z_t = always_redraw(lambda: Text("z").next_to(z.get_center(), RIGHT))
        t_2 = always_redraw(lambda: Polygon(x.get_center(), y.get_center(), z.get_center()).set_fill(color = BLUE, opacity = 0.5))
        self.add(x,y,z, x_t, y_t, z_t)
        l1 = always_redraw(lambda: 
            Line(y.get_center(), x.get_center())
        )
        l2 = always_redraw(lambda: 
            Line(z.get_center(), x.get_center())
        )
        l3 = always_redraw(lambda: 
            Line(y.get_center(), z.get_center())
        )
        angle = always_redraw(lambda: Angle(l1,l2, radius = 0.3, quadrant = (-1,-1)))
        vt = ValueTracker(angle.get_value(degrees = True))
        angle_t = always_redraw(lambda: DecimalNumber(vt.get_value(), unit="^{\circ}").shift(UP*0.5).scale(0.8))
        self.add(angle, angle_t)
        l1 = always_redraw(lambda: 
            Line(y.get_center(), x.get_center())
        )
        l2 = always_redraw(lambda: 
            Line(z.get_center(), x.get_center())
        )
        l3 = always_redraw(lambda: 
            Line(y.get_center(), z.get_center())
        )
        theta = MathTex(r"\theta" , color = PURPLE).next_to(x, DOWN)
        tr = Group(l1,l2,l3)
        self.add(tr, t_2)
        self.remove(t)
        self.wait()
        self.play(vt.animate.set_value(120), Rotate(y, angle = -30*DEGREES, about_point = x.get_center()), Rotate(z, angle = 30*DEGREES, about_point = x.get_center()), run_time = 3)
        self.play(vt.animate.set_value(60), Rotate(y, angle = 30*DEGREES, about_point = x.get_center()), Rotate(z, angle = -30*DEGREES, about_point = x.get_center()), run_time = 3)
        self.wait()
        self.play(Transform(angle_t, theta))
        self.remove(angle_t)
        self.add(theta)
        self.wait()
        self.add(t)
        self.play(Rotate(t, angle = 180*DEGREES, about_point = x.get_center()), run_time = 2)
        self.wait()
        self.play(t.animate.shift(LEFT*(l1.get_length()*np.cos(60*DEGREES))))
        self.play(t.animate.shift(DOWN*(l1.get_length()*np.sin(60*DEGREES))))
        self.wait()
        a = Text("a", color = RED).next_to(l1, RIGHT*3)
        b = Text("b", color = GREEN).next_to(l2, DOWN + LEFT*0.5)
        self.play(Write(a), Write(b))
        self.wait()
        first = MathTex("2A = Base \\times Height").shift(RIGHT*4 + UP).scale(0.8)
        second = MathTex("A = \\frac{1}{2} \\times Base \\times Height").shift(RIGHT*4).scale(0.8)
        third = MathTex("A = \\frac{1}{2} \\times b \\times aSin(\\alpha)").shift(RIGHT*4 + DOWN*1).scale(0.8)
        self.play(Write(first))
        self.play(Write(second))
        l4 = DashedLine(x.get_center(), (y.get_center() + z.get_center())/2, color = YELLOW)
        angle_2 = Angle(l2,l3, radius = 0.3, quadrant = (1,-1), color = YELLOW)
        angle_2_t = MathTex(r"\alpha" , color = YELLOW).next_to(z, LEFT).shift(UP*0.25)
        self.play(Create(l4))
        self.wait()
        self.play(Create(angle_2), Create(angle_2_t))
        third[0][6].set_color(GREEN)
        third[0][8].set_color(RED)
        third[0][13].set_color(YELLOW)
        self.play(Write(third))
        self.wait()


